{
  "createdAt": "2025-08-08T00:55:50.812Z",
  "updatedAt": "2025-10-08T02:27:15.228Z",
  "id": "LjkYMC2y52Jco72g",
  "name": "DataMC Project Info collection",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.DMREVOLVE_URL }}/login/api/firstfactor",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Host",
              "value": "={{ $json.DMREVOLVE_URL.split('/')[2].split(':')[0] }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"username\": \"gergob\",\n    \"password\": \"M@ciL@ci77\",\n    \"keepMeLoggedIn\": false,\n    \"targetURL\": \"{{ $json.DMREVOLVE_URL }}\",\n    \"requestMethod\": null\n}",
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true
            }
          },
          "timeout": 1000
        }
      },
      "id": "bb5aa304-1c7d-4535-9140-0fce65b16021",
      "name": "Login to DMRevolve",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        576,
        1248
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "url": "={{ $json.body.data.redirect }}/rom/getsummary?db=QA",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Cookie",
              "value": "={{ $json.headers['set-cookie'][0] }}"
            },
            {
              "name": "Host",
              "value": "={{ $json.body.data.redirect.split('/')[2].split(':')[0] }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "203a547d-aad5-415f-a0a0-fb490046c415",
      "name": "get ROM",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        800,
        1056
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const worklfowStaticData = $getWorkflowStaticData('global')\nworklfowStaticData.ProjectWorksCookie = \"pws=CfDJ8LZBwqdfsgBMrOLAdNGsjYyEA94RXKk176mgNwlT2yTaghCvAKAEeG0tavkDg1QmHcJpHjNk2v4F25n5pzFKAeGuVfyP0XENiIFnPAi7ogBGwiEc0JFrrzdujCqyN5hM0z8QfH6EOdfaFXy8Aapx0eEYMB2QnwaZsFzZHMGtC3Pg; Identity.External=chunks-2; $$A_U_ID=9a2a167e-a612-4a8b-b303-3849f69f6826; ARRAffinity=921fde596badeeac31f8017ab62e7761b901cce895773207dafa2a31a5236964; Identity.ExternalC1=CfDJ8PByodJIE6BLt528_9yXbQ0xMNjJKwZzikNQz8VzFygM1IBR_9Yaxa1nuJHOQyphn3ZM9f6NCzX7wIeCKbSDO6i6elvL3PTxYmw_PB3WkAMHiUitVNgtrPXICSizkahwnlHVo0O0TEfSopjMgM-JBKR4XPk9JRLTmuKdQuSxJp3nTjgXdRhMkoobC2XZ4rfiSHKG13N9rFPoTE_mQMeGqBujFzlO0tmow4jfejrN0JgnSWylVMIZheZ0XUH4Bp6WU3Ns42ToPZYlchnvedWV85Uu_b-vl-ZGg10Tvol_fJP39XfLw3PccSkGEEm4aG40FpdwJ2WEfdX7iF1WYggElOXXop0CmdgOuxh7uiJ7iT4wahckqI3nWpShg_TPDChj-SVRadu9VqLB-RYcn9N9nxNpAoZALOC1VkOVbWCzEscs_GTlLfN2j19PC6ypJEZGrcJThEtv_CHdQRchVruCEMuHtvsVhfO-k_hIKvKcXGxomIcLqwQ3V-o7iNmKTQu9T3rrhn96O8DSpXf7hUh5AZhZ98E0aVE3rc6HvvcBuHKXZgI9aPIceDMfWMmKOImlK6j1xuR6SIL7-jEmv9B-pBODEUkutUlObee75wXWZSIwwfhF3vZddevVkd9VmtYcMR215pwHeOBHcdJYDlIubHGKLe7VwlbsdGyaBuC1z5nygYbKxccO-PmkjMao8qNjDfT1T-Shp5BgbuEjLli6tLNxgPTVJMVqZLtJJZZWbhpjYOWocWSWxydoZMacA3LkNu6yL8_3i3-OTL42EEymcT0dcyPjp2xt3o3XyfJJEbD4qiFtGhmKaskhxM1PZ9HavpnbqUFoEPB6j1dQ2krytfHM6g-XXrtQq5EADt8iX_-RGO9FIbDiW9xD8903iR83wL7PEfwtaouliEnMfE6nWwJHZOWRFCSQuOyW6uPnWJhgLDjpZDi6af9FUO4R3pBlzV-I4rLVoDe3CTuIchxDzSfLtTo7WjAA5vC7K9FJrFJK00smK0pVvP-SunkOUjUKGL-w5gbgCtxMfvEGPMdwBBZXxSQXK2Xz91XUxnV7glHfRsp0pnf9sdlhqTVXgjdXZg-39GPvmIsLXnYbs6-YVerdPmUs1wspA9vfrGqz0AtZZ6MbLAz0arPpz1zmewQcGg88EkhpF6jQXytektMTaPuIMjKOKrkWVT_-VasIOCGjHrQFavjsgDYdcUkZP8ixHVnryFKiZ8uDhkGjdipgTy9oIKtMyh1rcuQKtGAuivb49_Nt9ncqAWOYCcsYIPOTAN9KXOJbrkjLOlbzWk74VUaMFrYQMoFYlnPtomSOfCwbVTQzGYfsHcVygfGhuNA6ab6Ht5VsqKcgoBx-1tDz2HMjj_ZeVvyb40fjTcGMMJ6KHc01cPN2DyyAZdUCr-saYsJ_DgUNKC7HjKXQ7nodxCtybmUtZmhiIDeZ_wgMwkgYZ8uZhz0Iwlkr0LehXDGRqoCR8r3pYMFINmiTOIRwx9y6D9TMBrnHuHdU9j2Eqnu8x3M99yKq1IUV3yKkl9AhM2D0qA6Lp4bwYV_IxPDmjbDf98ARz9DxI-bQFSed97IsffJpt1esEcV-MFtrbi6hyWuqijCjM47CEYMETC1dex0vOjPRWNG6B1VywW4IytzW3BT_CcIsYFDB_SQ7IqbeIIuOVI__FceTkboK5WwDXqzbil_m0kHYGnzgdgWOny2SNvPQLkSDe9OpHAd6j6JJ6w3nAQMT04iz_nb-24NnLP7EhRaeLytqEghHxcd4w6Egmx9WafI41JVBp8Z8UdeRZs5B10nspJCf7Nr8Fx0rTKEOhcSVnFmHhEwCadx8Mihnph4ppPnYu3kruMd2gH2IvVLhpuloxWQ5HIsqEb-H-6BgnfY4XqhDlw4qt2sy7P_4wVNoGz6izQBJCi_aDrtfhip-le-HVQl1MMDeq_Rdeqd_LA9oJIM8pHmmdtxhXdeIwu0hMGKiWyNU4vupqfT79EDxd1NSUSa1m7mv4jlStJzIEBmKfVberRur7AqxZlFk_Q5alCOoOMz-K7bgu0pVfvvPZKb25aIqgCBgUZx74tNvKmRHSx9O9niPfSIO_FsmWhoZJhhZU5wGmr2CyyL3heabI0Dd9_ebrEeLFwQKTmHMsBk5OZ0QglZZzXeWVuBFxYv93AOR7NqexzTxZJIfEErECgoGMgeYX6vC6b0YfoDliIFWmhD-aBnX19IEiG49UpXLWYsE0dhllw674KxHgjpPyTyllZ1tfJLg4WFGlHp_bfiKp_XmNfnelUgMBYWzNsn3EuFoQDAgRYb2SpoKNSkqAxmfSj7YxqfUacld5j6L92Is2gZZ8MX2He1FAW_gVbRJda0Co3Q2XoTQKuAt62Im8WqrGzHaRDpHaDxIZ-yVlPp4nJE3lizR8lCBEs_AeGCYLcN0qKH3aO93HT7kpuAVJSj1KlSaSZwhH0VBH86nVuEaOMvKamKG6X1F0b_M3aV66Y61wx4Knmw19LeguEL7-s04F-issSX-tjZikEiFYh6NGms3tykm-9OA5Ohn32K-eOSDjuJev9Ihlc4b8wAe5gHZopzEFJQyYIZmpnuE-uHErP8RBQPYUjEXH-DPZzzPIqTMjojrNwkzkwOCLH8HSd72V0fSd5dtQZ9llqQ4D4JbhnKevqcYq4Qkq2AHSuq71CmrGT98ES5USF1d4Ox7O4EPdLJm-CwZDIMV6J5Dru84PSNflBFWJX0TWzTfFsKJoH0QS6p8PDjTXUywi9kfGMKk-4_RkMdJkJuU8G9HEf8wvFEzUT-ZtRP6AAeK2h4xrKM8bDTO9C0Lb7v0dVGz_lbVDebv4MgqRiuPQEONi9jH8Skedfm7gQQ9j--QPzebLTT2XFIy95C57gnfw5-OAH4rW_4o8lvma-lC1ifT7VFtc8yF-FvuRr7NhUw1sq7VnXokhrDpVysW7XaFSFwAuT8-xqY_t-ISfypDDcOdZYSRGLIItL__Dr29B7x4IxncwomIT7PmPiOddtzPfywIhpAFbesYY3UkwVtS1I_niYKmOjihXyvyF3xYsW6NiweNlOJd4lAw-8EAVOiEHOtnKrmQUspdLIBMQzdiLAJ-4AbKkKE91x4jK-jrQgqvuwKYZZYJsbBrwCB-3c3I-Vy8g4iodKW_fENhQf_3S1I3Hc2EAPV2E7MIjw8vQfiYuy7x7qAULy61vAKLbg5yYMML95Ks4mZnRYjFJ8LZqoHAdQO2zEzRL19GQ5OWEvbJbvXaaY_9PdER-3MfJLI6JSAsRp4vatknL0yCVXmFce7IHWqNQRowHcj3lYQp_oV82IHXftwjjPraGNAS1aMlhA5rlBsKwU7ASUrtiQphaVwS0lyeb1CcGbQJVAnEu8L2ST0l52_GL0z6qR-WYPN-RB9BGuHaXaIWV9H53hgj-oCNCAZLEOBUUok1PoRk_MMRZUhjG6cO_XfiNng6hCFZ271z9d16lE_WvpHnKUU_lqfTHY6Po43mumdl4v9xQp2M0U-qwDBw598MmAiBF8gAf2ZRXQX9WRdIRZJIPy8sXsqvJhG4j-lCH1UJKth6E-9jpjgzLvpQN-MFJFk9uwCyDQ3r-pSixGg-OyZ6OdPgBCyppBy5gzzL2tZER3tP-R_xV96rpFxsOsk5J-TnIB71v-EFbVWtTosDpPiuTjKHesJYGCUAPiYclHJJC5iDPxy7XgpE813UcUbe8XBWvqFQfEjnbLr5tQZXFoK_H2UAT8TxfjrMHajURU2x299fWZX67-K2ifHtGvedSDMJOFbbPrgO-wpSZBp5p3UrGnxU3_KFuo6ozg2IVALitKS3p6adYrXkihk_R40_fESUNfzAu7bJ8BwlzRhCYKcDILuDoDUsaezT1iXJ_as-MeYb4aDzuHGOkFYFocmFRnqWQ0t6Q_9iicUPGM6a--mGoaiNhB1WhVOS9DCNix-_3gLuBxCs7ldT6nXJo; Identity.ExternalC2=zqFUIYG3drhB1VSyc7EzwiPOnNHh8PgSs8R1ohqKaBGJqZMkuMG2cmHhsFnQYIdqtykVdvv60FELDRB_vIP1FMT8nIn8igyJkwQZbRoc5lNxQpt--Gb-Plyb_h5D1hvOcjdGopsZ1YynQ0Xn6noebu0Mibn4LLfYr6s51MFZslY9Krc36H5-vQeyV6ZUImrDAbwN-2BjuzezQ; ARRAffinitySameSite=6f77be28b3004d4cc1569dedf410c508dec950fcbe1d403138b14e18b993b928; pwf=CfDJ8PByodJIE6BLt528_9yXbQ34POo-H9lgKHdu6udK8Mq4B1TH7geldo-XxQMXtOWHiqyw3ZWUzU5HceNPBII_EZrC67tpwQzKKyQaVYQqWbezBvIyIlPSXUFbGJH4VqyyfM9lGp9sePXjyWBvj8Sx2CA; ARRAffinity=3bf8829b4314cc88291bac4130bb39f2498ea1af76e709ccc5192f2a63139759; ARRAffinitySameSite=3bf8829b4314cc88291bac4130bb39f2498ea1af76e709ccc5192f2a63139759; x-ms-routing-name=self; TiPMix=17.44309293686396; pwa=CfDJ8PByodJIE6BLt528_9yXbQ1aJPt-d1jbVmgDT5Sz-YKu8BDT9ID97pso_4GIqXF9RoPx1bzonBrjY0AsiwjIGLHQkY9mXAKfkX1MHgLSzntRpyA6RK9bz_k3M8oK56nXs14yPKnWn3K3wCrn8zYrgubPKQ8RX700eVfj5WgkO9KQQ541JrAlR8Sx52cC6PD_6zAsZfnWUCNzEZqRMQz5jfYivZchX66MR2m2GSMuy3waYvMP45e6vD9ag1O_dSbvjx-121CAkVRpKeU8UX-3nIlDkIjW8EcqlJk5uOjqNWLfcNT0y7vb9rxF_uLnhZVyYiZZtcgROJvfV7Ek1uykGjTdlM_ETwgghFsfrTT71QRjtp6uzJtbjW6tSVjvWJ2RyN22rU3YaIhoRuuOGeLn7tgn5M-ITPejs3O38oaSO5K2Oxy_xzlyy7rBISINUU6guyLwYfu0lLmpQ2eMUlRRijXbrMtqAmAQUp-tRYIpO0Q_7e44D327rusFz6RGYm665HWaj4h_oS3IG9umUZn8fIeoIck_5icTPAp-dKDFtg6uTApVdsl8T34lunXAKIrnCn8tIzuygQBP3-bhhZosIucJhDIFKc8kn42AjdgsYaUrrFS0UyaVBglRsx2leQgaTIiF-tHHNxLiI9GF7Ch47gXO1Xq66bOoOm4c9wHMZ97zbRZs3zWRgfVXhHxJbU4SR7Rx8F47qeqB6JQo1UDHWf99t5aTe6r643qK_tUL_bl1_ooEVDeE28i8GH0b6S6nVQPfr2V-vjUpsbctNUGeeLO5VFJJEpQSyqYNGhEg8RpZD3YTFojO3Z_MgBI2w6Aaj4iVk4VuQ-hYzlW2eAWS6A5ePxBI3WJ3-PYkNIOhZKN4KLWaECYDMXSa8Yr0DWWZPPAZXgNFZtxs_dbSrwggnn5PesTRCPQtq7NF7I9tM9ZEHJJZhw0FFcTZq6HqZaIu8aoT91xMaIPDLII2i0lEg_I; ph_phc_FItzF9gSMWU3vk8no368BnUuVqhnOk222NachQaLs2w_posthog=%7B%22distinct_id%22%3A%22gergo.bacskai%40datamc.com%22%2C%22%24sesid%22%3A%5B1759890409565%2C%220199c1a3-f9a0-70a0-9759-4257aa4e8a4b%22%2C1759890373024%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fdatamc.projectworksapp.com%2FAccount%2FLogin%22%7D%7D\";\n\nreturn {worklfowStaticData}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        128,
        176
      ],
      "id": "297e540f-7f0c-4972-a1de-e4662b0ad769",
      "name": "Projectworks Cookie"
    },
    {
      "parameters": {
        "url": "https://datamc.projectworksapp.com/Projects/Directory",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Cookie",
              "value": "={{ $json.worklfowStaticData.ProjectWorksCookie }}"
            },
            {
              "name": "Host",
              "value": "datamc.projectworksapp.com"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "4e7d0b28-0385-4e8b-a029-dcb247cd8a7d",
      "name": "Get Projects",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        352,
        176
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "=data",
        "include": "allOtherFields",
        "options": {}
      },
      "id": "e644a90c-89f8-428d-81de-bfd97656dd9e",
      "name": "Turn to a list1",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        800,
        176
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const regex = /\\/Project\\/View\\/(\\d+)/g;\nconst numbers = [];\nconst uniqueIds = new Set(); // Track unique IDs\nlet match;\n\nwhile ((match = regex.exec($input.first().json.data)) !== null) {\n  const projectId = parseInt(match[1], 10);\n  \n  // Only add if ID is not already in the Set\n  if (!uniqueIds.has(projectId)) {\n    uniqueIds.add(projectId);\n    numbers.push({ \"id\": projectId });\n  }\n}\n\nreturn { \"data\": numbers };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        176
      ],
      "id": "054c4cc8-c401-4f13-84a0-4bfcea22dfa1",
      "name": "Extract Project Codes"
    },
    {
      "parameters": {
        "url": "=https://datamc.projectworksapp.com/Project/AssignScheduleTasks?projectID={{ $json.data.id }}&isFromSchedule=true",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Cookie",
              "value": "={{ $('Projectworks Cookie').item.json.worklfowStaticData.ProjectWorksCookie }}"
            },
            {
              "name": "Host",
              "value": "datamc.projectworksapp.com"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "fac92a96-8604-425a-8162-2da97d489b55",
      "name": "Schedules",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1088,
        368
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "url": "=https://datamc.projectworksapp.com/Project/Budgets/{{ $json.data.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Cookie",
              "value": "={{ $('Projectworks Cookie').item.json.worklfowStaticData.ProjectWorksCookie }}"
            },
            {
              "name": "Host",
              "value": "datamc.projectworksapp.com"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "9f7f5ce8-2b1f-4784-9e68-48ee09973aa9",
      "name": "Budgets",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1088,
        176
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "url": "https://dev.azure.com/DataMigrationConsultants/_apis/projects?api-version=7.1",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Cookie",
              "value": "={{ $json.Cookie }}"
            },
            {
              "name": "Host",
              "value": "dev.azure.com"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "261ff970-9388-4294-bcc4-49c214eb6837",
      "name": "Get Projects1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        128,
        720
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false,
      "credentials": {
        "httpBearerAuth": {
          "id": "nWloeuENyaWwUL6K",
          "name": "Devops Token"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://dev.azure.com/DataMigrationConsultants/_apis/projects/{{ $json.data.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "fad2a099-def6-4900-9775-3d36555911ba",
      "name": "Project Details",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1600,
        912
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false,
      "credentials": {
        "httpBearerAuth": {
          "id": "nWloeuENyaWwUL6K",
          "name": "Devops Token"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://dev.azure.com/DataMigrationConsultants/{{ $json.data.id }}/_apis/wit/wiql",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "api-version",
              "value": "6.1"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"query\": \"Select [System.Id], [System.Title], [System.State] From WorkItems Where [System.Id] > 0 order by [System.Id] ASC\"}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "9c6448a1-4dd7-4014-b77d-3f8af8944b76",
      "name": "List workItems",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1600,
        624
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false,
      "credentials": {
        "httpBearerAuth": {
          "id": "nWloeuENyaWwUL6K",
          "name": "Devops Token"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "workItems",
        "options": {}
      },
      "id": "cbe2b4e0-5283-40a9-8eb2-4317843a3f78",
      "name": "Turn to a list3",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1824,
        624
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "c42f0ebd-b792-48d3-a469-9e15d75eda02",
      "name": "Get workItems",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2272,
        624
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false,
      "executeOnce": false,
      "credentials": {
        "httpBearerAuth": {
          "id": "nWloeuENyaWwUL6K",
          "name": "Devops Token"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json._links.workItemComments.href }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "1fd5e40a-6f7c-48d6-9f92-4ee990de682b",
      "name": "Get workItem comments",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2720,
        688
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false,
      "credentials": {
        "httpBearerAuth": {
          "id": "nWloeuENyaWwUL6K",
          "name": "Devops Token"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_projects",
          "mode": "list",
          "cachedResultName": "dm_projects"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "NAME_PROJECTWORKS": "={{ $json.data.name }}",
            "ID_PROJECTWORKS": "={{ $json.data.id }}",
            "PROJECT_NAME": "={{ $json.data.name }}"
          },
          "matchingColumns": [
            "ID_PROJECTWORKS"
          ],
          "schema": [
            {
              "id": "PROJECT_NAME",
              "displayName": "PROJECT_NAME",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "NAME_PROJECTWORKS",
              "displayName": "NAME_PROJECTWORKS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "ID_PROJECTWORKS",
              "displayName": "ID_PROJECTWORKS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1600,
        -16
      ],
      "id": "0d91b2ec-0b15-42f5-8c24-2ba2fe13dfed",
      "name": "Insert or update rows in a table",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://datamc.projectworksapp.com/Project/Details/{{ $json.data.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Cookie",
              "value": "={{ $('Projectworks Cookie').item.json.worklfowStaticData.ProjectWorksCookie }}"
            },
            {
              "name": "Host",
              "value": "datamc.projectworksapp.com"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "ce4bd14d-8c9a-47e5-ab32-408e4e1af935",
      "name": "Details",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1088,
        -16
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const htmlContent = $input.item.json.data;\n\n// Extract title\nconst titleRegex = /<title\\b[^>]*>([\\s\\S]*?)<\\/title>/i;\nconst match = htmlContent.match(titleRegex);\n\nif (match && match[1]) {\n  const title = match[1].trim();\n  \n  // Clean up HTML entities (e.g., \"&#xA0;\" → \" \")\n  const cleanTitle = title.replace(/&#xA0;/g, \" \").trim();\n  \n  // Split into ID (first word) and Name (rest)\n  const [id, ...nameParts] = cleanTitle.split(/\\s+/);\n  const name = nameParts.join(\" \").trim();\n\n  console.log(\"Extracted ID:\", id);\n  console.log(\"Extracted Name:\", name);\n  \n  return {\n    \"data\": {\n      \"id\": $('Turn to a list1').item.json.data.id,\n      \"name\": name\n    }\n  };\n} else {\n  console.error(\"No <title> tag found in HTML\");\n  return null;\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1376,
        -16
      ],
      "id": "558d6c87-6079-4315-9114-eaca8d35ea4d",
      "name": "Extract Project Codes1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const htmlContent = $input.item.json.data;\n\n// Regex to match the total budget (accounts for different formats)\nconst budgetRegex = /Total Budget[\\s\\S]*?\\$([\\d,]+\\.\\d{2})/i;\nconst match = htmlContent.match(budgetRegex);\n\nif (match && match[1]) {\n  const budgetAmount = match[1]; // \"578,270.00\"\n  const budgetNumber = parseFloat(budgetAmount.replace(/,/g, ''));\n  console.log(\"Extracted Budget:\", budgetAmount);\n  \n  return {\n    \"data\": {\n      \"total_budget\": budgetNumber,\n      \"id\" : $('Turn to a list1').item.json.data.id\n    }\n  };\n} else {\n  console.error(\"No budget amount found in HTML\");\n  return null;\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1376,
        176
      ],
      "id": "7b2e4f80-bfc2-427c-918c-ec69c1c7711f",
      "name": "Extract Project Codes2"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_projects",
          "mode": "list",
          "cachedResultName": "dm_projects"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "BUDGET": "={{ $json.data.total_budget }}",
            "ID_PROJECTWORKS": "={{ $json.data.id.toString() }}"
          },
          "matchingColumns": [
            "ID_PROJECTWORKS"
          ],
          "schema": [
            {
              "id": "PROJECT_NAME",
              "displayName": "PROJECT_NAME",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "NAME_PROJECTWORKS",
              "displayName": "NAME_PROJECTWORKS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ID_PROJECTWORKS",
              "displayName": "ID_PROJECTWORKS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "BUDGET",
              "displayName": "BUDGET",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1600,
        176
      ],
      "id": "836da606-97d2-45cd-9ad8-53c2f3b5334e",
      "name": "Update rows in a table",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function extractTaskData(html) {\n    // Match module headers to get module names\n    const moduleRegex = /<tr[^>]*class=\"cu-tableHeaderSecondary\"[^>]*>[\\s\\S]*?<input[^>]*id=\"Modules_(\\d+)__ModuleID\"[^>]*value=\"(\\d+)\"[^>]*>([\\s\\S]*?)<\\/td>/g;\n    \n    // Match task rows to get task IDs and names\n    const taskRegex = /<input[^>]*id=\"Modules_(\\d+)__Tasks_(\\d+)__TaskID\"[^>]*value=\"(\\d+)\"[^>]*>[\\s\\S]*?<input[^>]*id=\"\\d+\"[^>]*name=\"Modules\\[\\d+\\]\\.Tasks\\[\\d+\\]\\.IsScheduledTask\"[^>]*>([\\s\\S]*?)<\\/label>/g;\n    \n    // Match date inputs\n    const dateRegex = /<input[^>]*id=\"Modules_(\\d+)__Tasks_(\\d+)__(StartDate|EndDate)\"[^>]*value=\"([^\"]*)\"[^>]*>/g;\n\n    // Store modules separately\n    const modules = {};\n    let moduleMatch;\n    \n    // Extract modules and their names\n    while ((moduleMatch = moduleRegex.exec(html)) !== null) {\n        const moduleIndex = moduleMatch[1];\n        const moduleId = moduleMatch[2];\n        const moduleName = moduleMatch[3].trim();\n        \n        modules[moduleIndex] = {\n            moduleId: moduleId,\n            moduleName: moduleName\n        };\n    }\n\n    // Create flat list of tasks\n    const tasks = [];\n    let taskMatch;\n    \n    // Extract tasks and their names\n    while ((taskMatch = taskRegex.exec(html)) !== null) {\n        const moduleIndex = taskMatch[1];\n        const taskIndex = taskMatch[2];\n        const taskId = taskMatch[3];\n        const taskNameHtml = taskMatch[4];\n        \n        // Extract just the text from the task name HTML\n        const taskName = taskNameHtml.replace(/<[^>]*>/g, '').trim();\n        \n        if (modules[moduleIndex]) {\n            const task = {\n                projectId : $('Turn to a list1').item.json.data.id,\n                moduleId: modules[moduleIndex].moduleId,\n                moduleName: modules[moduleIndex].moduleName,\n                taskId: taskId,\n                taskName: taskName\n            };\n            tasks.push(task);\n        }\n    }\n\n    // Add date information to tasks\n    let dateMatch;\n    while ((dateMatch = dateRegex.exec(html)) !== null) {\n        const moduleIndex = dateMatch[1];\n        const taskIndex = dateMatch[2];\n        const dateType = dateMatch[3].toLowerCase(); // startdate or enddate\n        const dateValue = dateMatch[4];\n        \n        // Find the corresponding task\n        const task = tasks.find(t => \n            t.moduleId === modules[moduleIndex]?.moduleId && \n            t.taskId === html.match(new RegExp(`id=\"Modules_${moduleIndex}__Tasks_${taskIndex}__TaskID\"[^>]*value=\"(\\\\d+)\"`))?.[1]\n        );\n        \n        if (task) {\n            const dateObject = new Date(dateValue);\n            if(dateValue) {\n                task[dateType] = dateObject;\n            }\n        }\n    }\n\n    return {\"data\" : tasks};\n}\n\nconst htmlContent = $input.item.json.data;\nconst extractedData = extractTaskData(htmlContent);\nreturn extractedData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1376,
        368
      ],
      "id": "76c818b3-0ad8-4fab-8b0e-e131b26d4491",
      "name": "Extract Project Codes3"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_tasks",
          "mode": "list",
          "cachedResultName": "dm_tasks"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "TASK_ID": "={{ $json.data.taskId }}",
            "MODULE_ID": "={{ $json.data.moduleId }}",
            "PROJECT_ID": "={{ $json.data.projectId }}",
            "MODULE_NAME": "={{ $json.data.moduleName }}",
            "TASK_NAME": "={{ $json.data.taskName }}",
            "START_DATE": "={{ $json.data.startdate }}"
          },
          "matchingColumns": [
            "PROJECT_ID",
            "MODULE_ID",
            "TASK_ID"
          ],
          "schema": [
            {
              "id": "PROJECT_ID",
              "displayName": "PROJECT_ID",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "MODULE_ID",
              "displayName": "MODULE_ID",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TASK_ID",
              "displayName": "TASK_ID",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "MODULE_NAME",
              "displayName": "MODULE_NAME",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "TASK_NAME",
              "displayName": "TASK_NAME",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "START_DATE",
              "displayName": "START_DATE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "END_DATE",
              "displayName": "END_DATE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1824,
        368
      ],
      "id": "00f9589d-bf43-4691-94a5-8c48372f9975",
      "name": "Insert or update rows in a table1",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "=data",
        "include": "allOtherFields",
        "options": {}
      },
      "id": "20e9e821-980d-4abb-92ed-3ed1a3619e23",
      "name": "Turn to a list4",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1600,
        368
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_projects",
          "mode": "list",
          "cachedResultName": "dm_projects"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        352,
        816
      ],
      "id": "a466097b-9f02-4cdd-af09-f584d55eccb5",
      "name": "Select rows from a table",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Which project_name should I pick from projects  for { \"id\" : {{ $json.value.id }} , \"name\" : {{ $json.value.name }}, \"description\" : {{ $json.value.description }}}\n\nJSON:\n{{ $json.projects.toJsonString() }}\n\nreturn only valid json, do not include any text or explanation:\n{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"id\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"matched_project_name\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}\n\nresponse_format = {\"type\" : \"json_object\"}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": ""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1024,
        608
      ],
      "id": "f9722b1a-5720-4aed-89c0-e3bbbe610957",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-oss-20b",
          "mode": "list",
          "cachedResultName": "openai/gpt-oss-20b"
        },
        "options": {
          "timeout": 300000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1104,
        832
      ],
      "id": "55997a21-29a3-49f2-9459-874ac2514447",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "f7w1w21IJI9gIfih",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        800,
        720
      ],
      "id": "cc5d54d6-e890-4fd8-ab3d-09642902de11",
      "name": "Merge"
    },
    {
      "parameters": {
        "fieldToSplitOut": "=value",
        "include": "allOtherFields",
        "options": {}
      },
      "id": "337cb184-c04b-4883-b5cb-ff1a71198261",
      "name": "Turn to a list5",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        576,
        624
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nvar arr = []\n\nfor (const item of $input.all()) {\n  arr.push({\"project_name\" : item.json.PROJECT_NAME, \"name_devops\" : $input.first().json.NAME_DEVOPS, \"id_devops\" : $input.first().json.ID_DEVOPS })\n}\n\nreturn {\"projects\" : arr} ;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        816
      ],
      "id": "8b3e2dad-8d33-44d3-9e09-3fcd8d968a48",
      "name": "Code1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "\nfunction extractJsonSimple(text) {\n  const jsonRegex = /(\\{[^}{]*\\}|\\[[^\\[\\]]*\\])/g;\n  const matches = text.match(jsonRegex) || [];\n  \n  return matches\n    .map(match => {\n      try {\n        return JSON.parse(match);\n      } catch (e) {\n        return null;\n      }\n    })\n    .filter(Boolean);\n}\n\n\n\nlet arr = extractJsonSimple($json.output)\nconst projectName = $('Merge').item.json.value.name;\n\n// Add project_name to EACH object in the array\narr = arr.map(obj => ({\n  ...obj,\n  project_name: projectName\n}));\n\n\nreturn {\"data\" : arr[0] }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1376,
        720
      ],
      "id": "bc6451d5-cfc1-4ab5-ad25-c3b9e95fc03a",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_projects",
          "mode": "list",
          "cachedResultName": "dm_projects"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "PROJECT_NAME": "={{ $('Code2').item.json.data.matched_project_name }}",
            "ID_DEVOPS": "={{ $json.id }}",
            "NAME_DEVOPS": "={{ $json.name }}"
          },
          "matchingColumns": [
            "PROJECT_NAME"
          ],
          "schema": [
            {
              "id": "PROJECT_NAME",
              "displayName": "PROJECT_NAME",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "NAME_PROJECTWORKS",
              "displayName": "NAME_PROJECTWORKS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ID_PROJECTWORKS",
              "displayName": "ID_PROJECTWORKS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "BUDGET",
              "displayName": "BUDGET",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ID_DEVOPS",
              "displayName": "ID_DEVOPS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "NAME_DEVOPS",
              "displayName": "NAME_DEVOPS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2048,
        912
      ],
      "id": "a3eabb71-a7aa-4dbe-b0aa-0fe02993f2e5",
      "name": "Update rows in a table1",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3aeff8c2-ae87-4193-af3c-a14981a63b84",
              "leftValue": "={{ $('Code2').item.json.data.matched_project_name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1824,
        912
      ],
      "id": "6bb0f319-99c7-4fae-91a5-e17b9ed9ea30",
      "name": "Filter1"
    },
    {
      "parameters": {
        "batchSize": 500,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2048,
        624
      ],
      "id": "eef6c674-3ad5-4a5e-9437-9c8ab61afe2f",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9f579c68-0ede-4c55-8396-4ae1da175e9c",
              "leftValue": "={{ $json.DMREVOLVE_URL }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        352,
        1248
      ],
      "id": "e843d288-19af-48b6-8e27-e30d0b9f3c0d",
      "name": "Filter2"
    },
    {
      "parameters": {
        "content": "## Azre DevOps",
        "height": 80,
        "width": 2176
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        272,
        480
      ],
      "typeVersion": 1,
      "id": "8326d50d-b983-499a-ac71-8f8368d8d5cd",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Projetworks",
        "height": 80,
        "width": 2768
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        256,
        -112
      ],
      "typeVersion": 1,
      "id": "dd980fc8-4a7b-46a1-b877-22fe8db6dda3",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## DMRevolve",
        "height": 80,
        "width": 1760
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        480,
        1040
      ],
      "typeVersion": 1,
      "id": "be8332df-947b-468d-9308-8011f8b8a09e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "url": "={{ $json.body.data.redirect }}/wom/getobjectspage",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Host",
              "value": "={{ $json.body.data.redirect.split('/')[2].split(':')[0] }}"
            },
            {
              "name": "Cookie",
              "value": "={{ $json.headers['set-cookie'][0] }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "8546d0d6-4075-49a8-9cc8-9b7068678723",
      "name": "Get WOM Data",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        800,
        1344
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "body.data",
        "options": {}
      },
      "id": "bfc01003-d22c-4728-b074-8650ff72210a",
      "name": "Turn to a list",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        1088,
        1248
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_rom",
          "mode": "list",
          "cachedResultName": "dm_rom"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "ID": "={{ $json.id }}",
            "DESCRIPTION": "={{ $json.description }}",
            "STREAM": "={{ $json.stream }}",
            "OBJECT": "={{ $json.object }}",
            "GROUP": "={{ $json.group }}",
            "BAD": "={{ $json.total.bad }}",
            "GOOD": "={{ $json.total.good }}",
            "WARNING": "={{ $json.total.warning }}",
            "COMPANY": "={{ $json.companies[0].company }}"
          },
          "matchingColumns": [
            "ID"
          ],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "DESCRIPTION",
              "displayName": "DESCRIPTION",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "STREAM",
              "displayName": "STREAM",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "OBJECT",
              "displayName": "OBJECT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "GROUP",
              "displayName": "GROUP",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "BAD",
              "displayName": "BAD",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            },
            {
              "id": "GOOD",
              "displayName": "GOOD",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            },
            {
              "id": "WARNING",
              "displayName": "WARNING",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            },
            {
              "id": "COMPANY",
              "displayName": "COMPANY",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1088,
        1056
      ],
      "id": "3c278a05-a9da-4a13-85c7-de8b3dc3c16f",
      "name": "Insert Rom",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "url": "={{ $('Login to DMRevolve').item.json.body.data.redirect }}/wom/history?id={{ $json.ID }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Host",
              "value": "={{ $('Login to DMRevolve').item.json.body.data.redirect.split('/')[2].split(':')[0] }}"
            },
            {
              "name": "Cookie",
              "value": "={{ $('Login to DMRevolve').item.json.headers['set-cookie'][0] }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "102a50d8-d027-4a7a-a2b0-7421ca793122",
      "name": "Get WOM History",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2496,
        1008
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "body",
        "options": {}
      },
      "id": "dc4afb02-31d2-450d-bb3a-c02e4e45d131",
      "name": "Turn to a list2",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        2720,
        1008
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_projects",
          "mode": "list",
          "cachedResultName": "dm_projects"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        128,
        1248
      ],
      "id": "7126e0e4-b8a7-40ac-8531-aaad18eb9a72",
      "name": "Select rows from a table1",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1824,
        1248
      ],
      "id": "fa0e11ef-42e5-4517-b73e-5d45074ae6a8",
      "name": "Loop Over Items2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4e173c2a-6dbe-4749-84b8-5e5b47376e26",
              "leftValue": "={{ $json.LE }}",
              "rightValue": "MTCC",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "c0785979-056e-4485-a652-518ab9fb3801",
              "leftValue": "={{ $json.OBJECT }}",
              "rightValue": "Asset_Attachment",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1600,
        1248
      ],
      "id": "cff9ab51-cba9-41c6-9122-0e09a861414d",
      "name": "Filter3",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_wom_history",
          "mode": "list",
          "cachedResultName": "dm_wom_history"
        },
        "deleteCommand": "delete",
        "where": {
          "values": [
            {
              "column": "COMPANY",
              "value": "={{ $json.LE }}"
            },
            {
              "column": "OBJECT_ID",
              "value": "={{ $json.ID }}"
            },
            {
              "column": "TIME_TEXT",
              "condition": "LIKE",
              "value": "%now"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2048,
        1104
      ],
      "id": "05eff3b3-da2e-493c-bf0c-bf01abd4bbd4",
      "name": "Delete wom history now",
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "comments",
        "options": {}
      },
      "id": "2b194cfd-a2ac-4759-9772-518f22008ca1",
      "name": "Turn to a list6",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        2944,
        688
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_workitem_comments",
          "mode": "list",
          "cachedResultName": "dm_workitem_comments"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "ID": "={{ $json.id }}",
            "WORKITEM_ID": "={{ $json.workItemId }}",
            "VERSION": "={{ $json.version }}",
            "TEXT": "={{ $json.text }}",
            "CREATED_BY": "={{ $json.createdBy.displayName }}",
            "FORMAT": "={{ $json.format }}",
            "MODIFIED_DATE": "={{ $json.modifiedDate }}"
          },
          "matchingColumns": [
            "ID"
          ],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "WORKITEM_ID",
              "displayName": "WORKITEM_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            },
            {
              "id": "VERSION",
              "displayName": "VERSION",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            },
            {
              "id": "TEXT",
              "displayName": "TEXT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "CREATED_BY",
              "displayName": "CREATED_BY",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "FORMAT",
              "displayName": "FORMAT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "MODIFIED_DATE",
              "displayName": "MODIFIED_DATE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3168,
        768
      ],
      "id": "73659e9a-d897-4256-a2b5-7c0f6731f1b0",
      "name": "Insert or update rows in a table4",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 50,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2496,
        768
      ],
      "id": "ac59976c-4a00-4602-bac5-580bd775a580",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_workitems",
          "mode": "list",
          "cachedResultName": "dm_workitems"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "WORKITEM_ID": "={{ $json.id }}",
            "TITLE": "={{ $json.fields['System.Title'] }}",
            "PROJECT_ID": "={{ $json.fields['System.TeamProject'] }}",
            "STATE": "={{ $json.fields['System.State'] }}",
            "REASON": "={{ $json.fields['System.Reason'] }}",
            "WORKITEM_TYPE": "={{ $json.fields['System.WorkItemType'] }}",
            "OBJECTGROUP": "={{ $json.fields['Custom.ObjectGroup'] }}",
            "TASKTRACKER": "={{ $json.fields['Custom.TaskTracker'] }}",
            "POM_COMPLETED": "={{ $json.fields['Custom.POMCompleted'] ?? false}}",
            "STARTEGY_COMPLETED": "={{ $json.fields['Custom.StrategyCompleted'] ?? false}}",
            "MOM_COMPLETED": "={{ $json.fields['Custom.MOMCompleted'] ?? false}}",
            "WOM_AUTO": "={{ $json.fields['Custom.WOMAuto'] ?? false}}",
            "DM_PACKAGE_COMPLETED": "={{ $json.fields['Custom.DMPackageCompleted'] ?? false}}",
            "NON_SG3_CODING_COMPLETED": "={{ $json.fields['Custom.NonSG3CodingCompleted'] ?? false}}",
            "WOM_AUTO_ENABLED": "={{ $json.fields['Custom.WOMAutoEnabled'] ?? false}}",
            "OBJECT_COMPLETION_DUE_DATE": "={{ $json.fields['Custom.ObjectCompletionDuedate'] }}",
            "CURRENT_WOM_STEP": "={{ $json.fields['Custom.CurrentWOMstep'] ?? '??'}}",
            "ASSIGNED_TO": "={{ $json.fields['System.AssignedTo'].displayName }}"
          },
          "matchingColumns": [
            "WORKITEM_ID"
          ],
          "schema": [
            {
              "id": "WORKITEM_ID",
              "displayName": "WORKITEM_ID",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TITLE",
              "displayName": "TITLE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "PROJECT_ID",
              "displayName": "PROJECT_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "STATE",
              "displayName": "STATE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "REASON",
              "displayName": "REASON",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "WORKITEM_TYPE",
              "displayName": "WORKITEM_TYPE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "OBJECTGROUP",
              "displayName": "OBJECTGROUP",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "TASKTRACKER",
              "displayName": "TASKTRACKER",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "STARTEGY_COMPLETED",
              "displayName": "STARTEGY_COMPLETED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "POM_COMPLETED",
              "displayName": "POM_COMPLETED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "MOM_COMPLETED",
              "displayName": "MOM_COMPLETED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "WOM_AUTO",
              "displayName": "WOM_AUTO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "DM_PACKAGE_COMPLETED",
              "displayName": "DM_PACKAGE_COMPLETED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "NON_SG3_CODING_COMPLETED",
              "displayName": "NON_SG3_CODING_COMPLETED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "WOM_AUTO_ENABLED",
              "displayName": "WOM_AUTO_ENABLED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "OBJECT_COMPLETION_DUE_DATE",
              "displayName": "OBJECT_COMPLETION_DUE_DATE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "CURRENT_WOM_STEP",
              "displayName": "CURRENT_WOM_STEP",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "OBJECT",
              "displayName": "OBJECT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "BLOCK_REASON",
              "displayName": "BLOCK_REASON",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "ASSIGNED_TO",
              "displayName": "ASSIGNED_TO",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2496,
        528
      ],
      "id": "3e0f681b-5bf5-4311-a081-6651510f78c2",
      "name": "I/U workitems",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2272,
        1248
      ],
      "id": "54697ff8-e37a-4452-aafa-07b7bf3870ae",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_wom_history",
          "mode": "list",
          "cachedResultName": "dm_wom_history"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "TIME": "={{ $json.time.split(' - ')[0] }}",
            "COMPANY": "={{ $('I/U wom').item.json.LE }}",
            "STATUS": "={{ $json.status }}",
            "NOTES": "={{ $json.notes }}",
            "USER": "={{ $json.user }}",
            "OBJECT_ID": "={{ $('Turn to a list').item.json.id }}",
            "TIME_TEXT": "={{ $json.time }}",
            "ENABLED": "={{ $json.enabled === true || $json.enabled === false ? $json.enabled : null }}"
          },
          "matchingColumns": [
            "COMPANY",
            "OBJECT_ID",
            "TIME_TEXT"
          ],
          "schema": [
            {
              "id": "COMPANY",
              "displayName": "COMPANY",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "STATUS",
              "displayName": "STATUS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "NOTES",
              "displayName": "NOTES",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "USER",
              "displayName": "USER",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "OBJECT_ID",
              "displayName": "OBJECT_ID",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TIME_TEXT",
              "displayName": "TIME_TEXT",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TIME",
              "displayName": "TIME",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "ENABLED",
              "displayName": "ENABLED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2944,
        1008
      ],
      "id": "cab13515-0887-439d-a6e9-ea4635ddbe91",
      "name": "I/U wom_history",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_projects",
          "mode": "list",
          "cachedResultName": "dm_projects"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "DMREVOLVE_URL": "={{ $('Login to DMRevolve').item.json.body.data.redirect }}",
            "ID": "={{ $json.body.data[0].LE }}"
          },
          "matchingColumns": [
            "DMREVOLVE_URL"
          ],
          "schema": [
            {
              "id": "PROJECT_NAME",
              "displayName": "PROJECT_NAME",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "NAME_PROJECTWORKS",
              "displayName": "NAME_PROJECTWORKS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ID_PROJECTWORKS",
              "displayName": "ID_PROJECTWORKS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "BUDGET",
              "displayName": "BUDGET",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "ID_DEVOPS",
              "displayName": "ID_DEVOPS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "NAME_DEVOPS",
              "displayName": "NAME_DEVOPS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "DMREVOLVE_URL",
              "displayName": "DMREVOLVE_URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ID",
              "displayName": "ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1088,
        1440
      ],
      "id": "9356af40-1f73-44ee-b73b-3455e933351a",
      "name": "U projects",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_wom",
          "mode": "list",
          "cachedResultName": "dm_wom"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "ENABLED": "={{ $json.enabled }}",
            "HIDDEN": "={{ $json.hidden }}",
            "ID": "={{ $json.id }}",
            "LE": "={{ $json.LE }}",
            "DUE_DATE": "={{ $json.dueDate }}",
            "GROUP": "={{ $json.group }}",
            "DESCRIPTION": "={{ $json.description }}",
            "OBJECT": "={{ $json.object }}",
            "PROGRESS": "={{ $json.progress }}",
            "STREAM": "={{ $json.stream }}",
            "STATUS": "={{ $json.status }}",
            "TAGS": "={{ $json.tags }}"
          },
          "matchingColumns": [
            "ID",
            "LE"
          ],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "LE",
              "displayName": "LE",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ENABLED",
              "displayName": "ENABLED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false
            },
            {
              "id": "DUE_DATE",
              "displayName": "DUE_DATE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "GROUP",
              "displayName": "GROUP",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "DESCRIPTION",
              "displayName": "DESCRIPTION",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "PROGRESS",
              "displayName": "PROGRESS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            },
            {
              "id": "OBJECT",
              "displayName": "OBJECT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "STREAM",
              "displayName": "STREAM",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "STATUS",
              "displayName": "STATUS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "HIDDEN",
              "displayName": "HIDDEN",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false
            },
            {
              "id": "TAGS",
              "displayName": "TAGS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1376,
        1248
      ],
      "id": "346c7786-710a-4b12-897d-1814ff357ca0",
      "name": "I/U wom",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "body",
        "options": {}
      },
      "id": "5f9b66ad-0a90-4c86-a0e9-0109464b99b2",
      "name": "Turn to a list7",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        2720,
        1168
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "datamc",
          "mode": "list",
          "cachedResultName": "datamc"
        },
        "table": {
          "__rl": true,
          "value": "dm_wom",
          "mode": "list",
          "cachedResultName": "dm_wom"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "ID": "={{ $('Merge1').item.json.ID }}",
            "LE": "={{ $('Merge1').item.json.LE }}",
            "STRATEGY": "={{ $json }}"
          },
          "matchingColumns": [
            "LE",
            "ID"
          ],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "LE",
              "displayName": "LE",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ENABLED",
              "displayName": "ENABLED",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "DUE_DATE",
              "displayName": "DUE_DATE",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "GROUP",
              "displayName": "GROUP",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "DESCRIPTION",
              "displayName": "DESCRIPTION",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "PROGRESS",
              "displayName": "PROGRESS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "OBJECT",
              "displayName": "OBJECT",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "STREAM",
              "displayName": "STREAM",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "STATUS",
              "displayName": "STATUS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "HIDDEN",
              "displayName": "HIDDEN",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "TAGS",
              "displayName": "TAGS",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "STRATEGY",
              "displayName": "STRATEGY",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2944,
        1168
      ],
      "id": "dc83063b-d7e0-40ec-b38a-7d01450f98dd",
      "name": "I/U wom_history1",
      "credentials": {
        "postgres": {
          "id": "X11V0xBEimJlSfgL",
          "name": "Postgres gbacskai"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $('Login to DMRevolve').item.json.body.data.redirect }}/wom/api/getstrategy?id={{ $json.ID }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Host",
              "value": "={{ $('Login to DMRevolve').item.json.body.data.redirect.split('/')[2].split(':')[0] }}"
            },
            {
              "name": "Cookie",
              "value": "={{ $('Login to DMRevolve').item.json.headers['set-cookie'][0] }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "d33f1776-a6cb-454c-af26-4c789a1c58b0",
      "name": "Get WOM strategy",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2496,
        1168
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://asd234fsdffg.asuscomm.com:5678/webhook/workflow",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\"workflow_id\" : \"1zHb2baSRH85ujYA\"}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        128,
        1776
      ],
      "id": "254192fc-f3d8-43c4-9a0c-6d0bfb76ca05",
      "name": "Start Update Blocked Resons",
      "credentials": {
        "httpHeaderAuth": {
          "id": "hFhObbZejf9othAX",
          "name": "AWS Sandbox Authentication"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -400,
        560
      ],
      "id": "23b6e003-3920-4687-bffe-8834b370c69c",
      "name": "Schedule Trigger"
    }
  ],
  "connections": {
    "Login to DMRevolve": {
      "main": [
        [
          {
            "node": "Get WOM Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "get ROM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Projectworks Cookie": {
      "main": [
        [
          {
            "node": "Get Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Projects": {
      "main": [
        [
          {
            "node": "Extract Project Codes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Project Codes": {
      "main": [
        [
          {
            "node": "Turn to a list1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turn to a list1": {
      "main": [
        [
          {
            "node": "Details",
            "type": "main",
            "index": 0
          },
          {
            "node": "Budgets",
            "type": "main",
            "index": 0
          },
          {
            "node": "Schedules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Projects1": {
      "main": [
        [
          {
            "node": "Turn to a list5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Select rows from a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List workItems": {
      "main": [
        [
          {
            "node": "Turn to a list3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turn to a list3": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get workItems": {
      "main": [
        [
          {
            "node": "I/U workitems",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get workItem comments": {
      "main": [
        [
          {
            "node": "Turn to a list6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Details": {
      "main": [
        [
          {
            "node": "Extract Project Codes1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Project Codes1": {
      "main": [
        [
          {
            "node": "Insert or update rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Budgets": {
      "main": [
        [
          {
            "node": "Extract Project Codes2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Project Codes2": {
      "main": [
        [
          {
            "node": "Update rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert or update rows in a table": {
      "main": [
        []
      ]
    },
    "Schedules": {
      "main": [
        [
          {
            "node": "Extract Project Codes3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Project Codes3": {
      "main": [
        [
          {
            "node": "Turn to a list4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a table": {
      "main": [
        []
      ]
    },
    "Turn to a list4": {
      "main": [
        [
          {
            "node": "Insert or update rows in a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turn to a list5": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "List workItems",
            "type": "main",
            "index": 0
          },
          {
            "node": "Project Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Project Details": {
      "main": [
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update rows in a table1": {
      "main": [
        []
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "Update rows in a table1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Get workItems",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter2": {
      "main": [
        [
          {
            "node": "Login to DMRevolve",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get WOM Data": {
      "main": [
        [
          {
            "node": "Turn to a list",
            "type": "main",
            "index": 0
          },
          {
            "node": "U projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turn to a list": {
      "main": [
        [
          {
            "node": "I/U wom",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get ROM": {
      "main": [
        [
          {
            "node": "Insert Rom",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Rom": {
      "main": [
        []
      ]
    },
    "Get WOM History": {
      "main": [
        [
          {
            "node": "Turn to a list2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turn to a list2": {
      "main": [
        [
          {
            "node": "I/U wom_history",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table1": {
      "main": [
        [
          {
            "node": "Filter2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [],
        [
          {
            "node": "Delete wom history now",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Filter3": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete wom history now": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turn to a list6": {
      "main": [
        [
          {
            "node": "Insert or update rows in a table4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Get workItem comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert or update rows in a table4": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Get WOM History",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get WOM strategy",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "I/U wom_history": {
      "main": [
        []
      ]
    },
    "I/U wom": {
      "main": [
        [
          {
            "node": "Filter3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Turn to a list7": {
      "main": [
        [
          {
            "node": "I/U wom_history1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "I/U wom_history1": {
      "main": [
        []
      ]
    },
    "Get WOM strategy": {
      "main": [
        [
          {
            "node": "Turn to a list7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Projectworks Cookie",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Projects1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Select rows from a table1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Start Update Blocked Resons",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "global": {
      "ProjectWorksCookie": "pws=CfDJ8LZBwqdfsgBMrOLAdNGsjYyEA94RXKk176mgNwlT2yTaghCvAKAEeG0tavkDg1QmHcJpHjNk2v4F25n5pzFKAeGuVfyP0XENiIFnPAi7ogBGwiEc0JFrrzdujCqyN5hM0z8QfH6EOdfaFXy8Aapx0eEYMB2QnwaZsFzZHMGtC3Pg; Identity.External=chunks-2; $$A_U_ID=9a2a167e-a612-4a8b-b303-3849f69f6826; ARRAffinity=921fde596badeeac31f8017ab62e7761b901cce895773207dafa2a31a5236964; Identity.ExternalC1=CfDJ8PByodJIE6BLt528_9yXbQ0xMNjJKwZzikNQz8VzFygM1IBR_9Yaxa1nuJHOQyphn3ZM9f6NCzX7wIeCKbSDO6i6elvL3PTxYmw_PB3WkAMHiUitVNgtrPXICSizkahwnlHVo0O0TEfSopjMgM-JBKR4XPk9JRLTmuKdQuSxJp3nTjgXdRhMkoobC2XZ4rfiSHKG13N9rFPoTE_mQMeGqBujFzlO0tmow4jfejrN0JgnSWylVMIZheZ0XUH4Bp6WU3Ns42ToPZYlchnvedWV85Uu_b-vl-ZGg10Tvol_fJP39XfLw3PccSkGEEm4aG40FpdwJ2WEfdX7iF1WYggElOXXop0CmdgOuxh7uiJ7iT4wahckqI3nWpShg_TPDChj-SVRadu9VqLB-RYcn9N9nxNpAoZALOC1VkOVbWCzEscs_GTlLfN2j19PC6ypJEZGrcJThEtv_CHdQRchVruCEMuHtvsVhfO-k_hIKvKcXGxomIcLqwQ3V-o7iNmKTQu9T3rrhn96O8DSpXf7hUh5AZhZ98E0aVE3rc6HvvcBuHKXZgI9aPIceDMfWMmKOImlK6j1xuR6SIL7-jEmv9B-pBODEUkutUlObee75wXWZSIwwfhF3vZddevVkd9VmtYcMR215pwHeOBHcdJYDlIubHGKLe7VwlbsdGyaBuC1z5nygYbKxccO-PmkjMao8qNjDfT1T-Shp5BgbuEjLli6tLNxgPTVJMVqZLtJJZZWbhpjYOWocWSWxydoZMacA3LkNu6yL8_3i3-OTL42EEymcT0dcyPjp2xt3o3XyfJJEbD4qiFtGhmKaskhxM1PZ9HavpnbqUFoEPB6j1dQ2krytfHM6g-XXrtQq5EADt8iX_-RGO9FIbDiW9xD8903iR83wL7PEfwtaouliEnMfE6nWwJHZOWRFCSQuOyW6uPnWJhgLDjpZDi6af9FUO4R3pBlzV-I4rLVoDe3CTuIchxDzSfLtTo7WjAA5vC7K9FJrFJK00smK0pVvP-SunkOUjUKGL-w5gbgCtxMfvEGPMdwBBZXxSQXK2Xz91XUxnV7glHfRsp0pnf9sdlhqTVXgjdXZg-39GPvmIsLXnYbs6-YVerdPmUs1wspA9vfrGqz0AtZZ6MbLAz0arPpz1zmewQcGg88EkhpF6jQXytektMTaPuIMjKOKrkWVT_-VasIOCGjHrQFavjsgDYdcUkZP8ixHVnryFKiZ8uDhkGjdipgTy9oIKtMyh1rcuQKtGAuivb49_Nt9ncqAWOYCcsYIPOTAN9KXOJbrkjLOlbzWk74VUaMFrYQMoFYlnPtomSOfCwbVTQzGYfsHcVygfGhuNA6ab6Ht5VsqKcgoBx-1tDz2HMjj_ZeVvyb40fjTcGMMJ6KHc01cPN2DyyAZdUCr-saYsJ_DgUNKC7HjKXQ7nodxCtybmUtZmhiIDeZ_wgMwkgYZ8uZhz0Iwlkr0LehXDGRqoCR8r3pYMFINmiTOIRwx9y6D9TMBrnHuHdU9j2Eqnu8x3M99yKq1IUV3yKkl9AhM2D0qA6Lp4bwYV_IxPDmjbDf98ARz9DxI-bQFSed97IsffJpt1esEcV-MFtrbi6hyWuqijCjM47CEYMETC1dex0vOjPRWNG6B1VywW4IytzW3BT_CcIsYFDB_SQ7IqbeIIuOVI__FceTkboK5WwDXqzbil_m0kHYGnzgdgWOny2SNvPQLkSDe9OpHAd6j6JJ6w3nAQMT04iz_nb-24NnLP7EhRaeLytqEghHxcd4w6Egmx9WafI41JVBp8Z8UdeRZs5B10nspJCf7Nr8Fx0rTKEOhcSVnFmHhEwCadx8Mihnph4ppPnYu3kruMd2gH2IvVLhpuloxWQ5HIsqEb-H-6BgnfY4XqhDlw4qt2sy7P_4wVNoGz6izQBJCi_aDrtfhip-le-HVQl1MMDeq_Rdeqd_LA9oJIM8pHmmdtxhXdeIwu0hMGKiWyNU4vupqfT79EDxd1NSUSa1m7mv4jlStJzIEBmKfVberRur7AqxZlFk_Q5alCOoOMz-K7bgu0pVfvvPZKb25aIqgCBgUZx74tNvKmRHSx9O9niPfSIO_FsmWhoZJhhZU5wGmr2CyyL3heabI0Dd9_ebrEeLFwQKTmHMsBk5OZ0QglZZzXeWVuBFxYv93AOR7NqexzTxZJIfEErECgoGMgeYX6vC6b0YfoDliIFWmhD-aBnX19IEiG49UpXLWYsE0dhllw674KxHgjpPyTyllZ1tfJLg4WFGlHp_bfiKp_XmNfnelUgMBYWzNsn3EuFoQDAgRYb2SpoKNSkqAxmfSj7YxqfUacld5j6L92Is2gZZ8MX2He1FAW_gVbRJda0Co3Q2XoTQKuAt62Im8WqrGzHaRDpHaDxIZ-yVlPp4nJE3lizR8lCBEs_AeGCYLcN0qKH3aO93HT7kpuAVJSj1KlSaSZwhH0VBH86nVuEaOMvKamKG6X1F0b_M3aV66Y61wx4Knmw19LeguEL7-s04F-issSX-tjZikEiFYh6NGms3tykm-9OA5Ohn32K-eOSDjuJev9Ihlc4b8wAe5gHZopzEFJQyYIZmpnuE-uHErP8RBQPYUjEXH-DPZzzPIqTMjojrNwkzkwOCLH8HSd72V0fSd5dtQZ9llqQ4D4JbhnKevqcYq4Qkq2AHSuq71CmrGT98ES5USF1d4Ox7O4EPdLJm-CwZDIMV6J5Dru84PSNflBFWJX0TWzTfFsKJoH0QS6p8PDjTXUywi9kfGMKk-4_RkMdJkJuU8G9HEf8wvFEzUT-ZtRP6AAeK2h4xrKM8bDTO9C0Lb7v0dVGz_lbVDebv4MgqRiuPQEONi9jH8Skedfm7gQQ9j--QPzebLTT2XFIy95C57gnfw5-OAH4rW_4o8lvma-lC1ifT7VFtc8yF-FvuRr7NhUw1sq7VnXokhrDpVysW7XaFSFwAuT8-xqY_t-ISfypDDcOdZYSRGLIItL__Dr29B7x4IxncwomIT7PmPiOddtzPfywIhpAFbesYY3UkwVtS1I_niYKmOjihXyvyF3xYsW6NiweNlOJd4lAw-8EAVOiEHOtnKrmQUspdLIBMQzdiLAJ-4AbKkKE91x4jK-jrQgqvuwKYZZYJsbBrwCB-3c3I-Vy8g4iodKW_fENhQf_3S1I3Hc2EAPV2E7MIjw8vQfiYuy7x7qAULy61vAKLbg5yYMML95Ks4mZnRYjFJ8LZqoHAdQO2zEzRL19GQ5OWEvbJbvXaaY_9PdER-3MfJLI6JSAsRp4vatknL0yCVXmFce7IHWqNQRowHcj3lYQp_oV82IHXftwjjPraGNAS1aMlhA5rlBsKwU7ASUrtiQphaVwS0lyeb1CcGbQJVAnEu8L2ST0l52_GL0z6qR-WYPN-RB9BGuHaXaIWV9H53hgj-oCNCAZLEOBUUok1PoRk_MMRZUhjG6cO_XfiNng6hCFZ271z9d16lE_WvpHnKUU_lqfTHY6Po43mumdl4v9xQp2M0U-qwDBw598MmAiBF8gAf2ZRXQX9WRdIRZJIPy8sXsqvJhG4j-lCH1UJKth6E-9jpjgzLvpQN-MFJFk9uwCyDQ3r-pSixGg-OyZ6OdPgBCyppBy5gzzL2tZER3tP-R_xV96rpFxsOsk5J-TnIB71v-EFbVWtTosDpPiuTjKHesJYGCUAPiYclHJJC5iDPxy7XgpE813UcUbe8XBWvqFQfEjnbLr5tQZXFoK_H2UAT8TxfjrMHajURU2x299fWZX67-K2ifHtGvedSDMJOFbbPrgO-wpSZBp5p3UrGnxU3_KFuo6ozg2IVALitKS3p6adYrXkihk_R40_fESUNfzAu7bJ8BwlzRhCYKcDILuDoDUsaezT1iXJ_as-MeYb4aDzuHGOkFYFocmFRnqWQ0t6Q_9iicUPGM6a--mGoaiNhB1WhVOS9DCNix-_3gLuBxCs7ldT6nXJo; Identity.ExternalC2=zqFUIYG3drhB1VSyc7EzwiPOnNHh8PgSs8R1ohqKaBGJqZMkuMG2cmHhsFnQYIdqtykVdvv60FELDRB_vIP1FMT8nIn8igyJkwQZbRoc5lNxQpt--Gb-Plyb_h5D1hvOcjdGopsZ1YynQ0Xn6noebu0Mibn4LLfYr6s51MFZslY9Krc36H5-vQeyV6ZUImrDAbwN-2BjuzezQ; ARRAffinitySameSite=6f77be28b3004d4cc1569dedf410c508dec950fcbe1d403138b14e18b993b928; pwf=CfDJ8PByodJIE6BLt528_9yXbQ34POo-H9lgKHdu6udK8Mq4B1TH7geldo-XxQMXtOWHiqyw3ZWUzU5HceNPBII_EZrC67tpwQzKKyQaVYQqWbezBvIyIlPSXUFbGJH4VqyyfM9lGp9sePXjyWBvj8Sx2CA; ARRAffinity=3bf8829b4314cc88291bac4130bb39f2498ea1af76e709ccc5192f2a63139759; ARRAffinitySameSite=3bf8829b4314cc88291bac4130bb39f2498ea1af76e709ccc5192f2a63139759; x-ms-routing-name=self; TiPMix=17.44309293686396; pwa=CfDJ8PByodJIE6BLt528_9yXbQ1aJPt-d1jbVmgDT5Sz-YKu8BDT9ID97pso_4GIqXF9RoPx1bzonBrjY0AsiwjIGLHQkY9mXAKfkX1MHgLSzntRpyA6RK9bz_k3M8oK56nXs14yPKnWn3K3wCrn8zYrgubPKQ8RX700eVfj5WgkO9KQQ541JrAlR8Sx52cC6PD_6zAsZfnWUCNzEZqRMQz5jfYivZchX66MR2m2GSMuy3waYvMP45e6vD9ag1O_dSbvjx-121CAkVRpKeU8UX-3nIlDkIjW8EcqlJk5uOjqNWLfcNT0y7vb9rxF_uLnhZVyYiZZtcgROJvfV7Ek1uykGjTdlM_ETwgghFsfrTT71QRjtp6uzJtbjW6tSVjvWJ2RyN22rU3YaIhoRuuOGeLn7tgn5M-ITPejs3O38oaSO5K2Oxy_xzlyy7rBISINUU6guyLwYfu0lLmpQ2eMUlRRijXbrMtqAmAQUp-tRYIpO0Q_7e44D327rusFz6RGYm665HWaj4h_oS3IG9umUZn8fIeoIck_5icTPAp-dKDFtg6uTApVdsl8T34lunXAKIrnCn8tIzuygQBP3-bhhZosIucJhDIFKc8kn42AjdgsYaUrrFS0UyaVBglRsx2leQgaTIiF-tHHNxLiI9GF7Ch47gXO1Xq66bOoOm4c9wHMZ97zbRZs3zWRgfVXhHxJbU4SR7Rx8F47qeqB6JQo1UDHWf99t5aTe6r643qK_tUL_bl1_ooEVDeE28i8GH0b6S6nVQPfr2V-vjUpsbctNUGeeLO5VFJJEpQSyqYNGhEg8RpZD3YTFojO3Z_MgBI2w6Aaj4iVk4VuQ-hYzlW2eAWS6A5ePxBI3WJ3-PYkNIOhZKN4KLWaECYDMXSa8Yr0DWWZPPAZXgNFZtxs_dbSrwggnn5PesTRCPQtq7NF7I9tM9ZEHJJZhw0FFcTZq6HqZaIu8aoT91xMaIPDLII2i0lEg_I; ph_phc_FItzF9gSMWU3vk8no368BnUuVqhnOk222NachQaLs2w_posthog=%7B%22distinct_id%22%3A%22gergo.bacskai%40datamc.com%22%2C%22%24sesid%22%3A%5B1759890409565%2C%220199c1a3-f9a0-70a0-9759-4257aa4e8a4b%22%2C1759890373024%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22https%3A%2F%2Fdatamc.projectworksapp.com%2FAccount%2FLogin%22%7D%7D"
    },
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateId": "2866",
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "f30bbbab-5aaa-436a-9b6c-a1016fa4f3c6",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-08-12T00:28:29.158Z",
      "updatedAt": "2025-08-12T00:28:29.158Z",
      "id": "NhKI3ivF74Mn13JL",
      "name": "datamc"
    }
  ],
  "shared": [
    {
      "createdAt": "2025-08-15T14:36:49.936Z",
      "updatedAt": "2025-08-15T14:36:49.936Z",
      "role": "workflow:owner",
      "workflowId": "LjkYMC2y52Jco72g",
      "projectId": "FlFnx4GL1IzMIs6I",
      "project": {
        "createdAt": "2025-08-15T14:30:31.525Z",
        "updatedAt": "2025-08-15T14:30:55.517Z",
        "id": "FlFnx4GL1IzMIs6I",
        "name": "Gergo Bacskai <gbacskai@gmail.com>",
        "type": "personal",
        "icon": null,
        "description": null
      }
    }
  ]
}